#!/bin/bash

cores=4

SCRIPT_PATH=`dirname "$0"`; SCRIPT_PATH=`eval "cd \"$SCRIPT_PATH\" && pwd"`

source $SCRIPT_PATH/xenoseq_functions; 		# Simple custom-made functions to manipulate fasta files

ORANGE='\033[0;33m'     # WARNINGS
RED='\033[0;31m'        # ERRORS
GREEN='\033[0;32m'      # COMPLETION
BLUE='\033[0;36m'       # FILES
GREY='\033[0;90m'       # CMD message
PRP='\033[0;35m'        # COSMETIC
NC='\033[0m' # No Color

metadata=""

print_usage() {
	  printf "Usage: ./xenoseq_find -s sample_name -m metafile -o output"
}


#OPTS
output="Xenoseq_default"
path_to_reads="samples/reads"
read_suffix="_R*.fq"
trace=false
link=false
force_relink=false
metadata=""
jobs=1
cores=8
blength=300
verbal=false
bpid=97
xeno_filename="xenotypic_contigs"

s="" # query index for find routine

while [ $# -gt 0 ]; do
	if [[ $1 =~ ^(-h|-help|--h|--help)$ ]] || [ -z "$1" ]; then
		print_usage;
		exit 1;
	elif [[ $1 =~ ^(-m|--metadata)$ ]]; then
		metadata=("$2")
	elif [[ $1 =~ ^(-v|--verbal)$ ]]; then
		verbal=true
	elif [[ $1 =~ ^(-o|--output)$ ]]; then
		output=("$2")
	elif [[ $1 =~ ^(-t|--trace)$ ]]; then
		trace=true
	elif [[ $1 =~ ^(-l|--link)$ ]]; then
		link=true
	elif [[ $1 =~ ^(-s|--s)$ ]]; then
		s=("$2")
	elif [[ $1 =~ ^(-f|--force_relink)$ ]]; then
		force_relink=true
	elif [[ $1 =~ ^(-p|--path_to_reads)$ ]]; then
		path_to_reads=("$2")
	elif [[ $1 =~ ^(-r|--read_suffix)$ ]]; then
		read_suffix=("$2")
	elif [[ $1 =~ ^(-j|--jobs)$ ]]; then
		jobs=("$2")
	elif [[ $1 =~ ^(-c|--cores)$ ]]; then
		cores=("$2")
	elif [[ $1 =~ ^(-L|--alignment_length)$ ]]; then
		blength=("$2")
	elif [[ $1 =~ ^(-P|--alignment_pid)$ ]]; then
		bpid=("$2")
	elif [[ $1 == *"-"* ]]; then
		v="${1/-/}"
		declare $v="$2"
	fi
	shift
done


parse_metadata $metadata

############
###### XENOSEQ_FIND
############


sample=${query_samples[$s]}

echo -en "\n[xenoseq_find     $(date +%d-%m_%H:%M:%S)] Starting xenoseq_find for ${sample} ${NC}"
index=$output/${reference_samples[$s]}/assembly/final.contigs.fa
echo ${reference_sample[$s]}
reads=$output/${sample}/reads/prepped_reads.fastq
out="$output/${sample}/read_mapping/${sample}_to_${reference_samples[$s]}"
mkdir -p $output/${sample}/read_mapping
mkdir -p $output/${reference_samples[$s]}/source_contigs
bwa_map $index $reads $out
unmapped_to_fasta $out.sorted.bam ${reference_samples[$s]}
assemble_mh $output/${sample}/reads/unique_reads.fasta 300 $output/${sample}/unique_assembly
seqkit sort -l -r $output/${sample}/unique_assembly/final.contigs.fa > $output/${sample}/unique_contigs.fasta 2> $output/logs/seqkit.log
success $? "Sorting unique contigs (seqkit)"

echo -e "[xenoseq_find     $(date +%d-%m_%H:%M:%S)] ${GREEN}Xenoseq_find completed succesfully for ${sample} ${NC}" 

# List unique reference samples (may have duplicates in it)
ureference_samples=($(echo "${reference_samples[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' '))

############
###### XENOSEQ_LINK
############
if [[ $link = "true" || $force_relink = "true" ]]; then
		if [[ $force_relink = "true" ]]; then 
			xeno_filename="xenotypic_contigs_L${blength}_P${bpid}"
		fi
		for (( j=0; j<${#ureference_samples[@]}; j++ )); do
			if [[ ${ureference_samples[$j]} == "empty" ]]; then continue; fi;
			if [ ! $j -eq $s ]; then 	# Check that you are not "linking" to yourself
				if [ -s $output/${sample}/unique_contigs.fasta ]; then
					index=$output/${ureference_samples[$j]}/assembly/final.contigs.fa
					link_contig $output/${sample}/unique_contigs.fasta $index $output/${sample}/unique_contig_links_to_${ureference_samples[$j]}.tbl ${ureference_samples[$j]}
					cat $output/${sample}/unique_contig_links_to_${ureference_samples[$j]}.tbl | cut -f 3 > $output/${sample}/unique_contig_links_to_${ureference_samples[$j]}.names
					seqkit grep -f $output/${sample}/unique_contig_links_to_${ureference_samples[$j]}.names $output/${ureference_samples[$j]}/assembly/final.contigs.fa 2> $output/logs/xenotypic.log > $output/${ureference_samples[$j]}/source_contigs/contigs_linked_to_${sample}.fa
					#rm $output/${ureference_samples[$j]}/source_contigs/contigs_linked_to_${sample}.fa
				fi
			fi
		done
		if ls $output/${sample}/unique_contig_links_to_*.tbl 1> /dev/null 2>&1; then
			echo "qseqid qlen sseqid slen pident length mismatch gapopen qstart qend sstart send evalue bitscore qseq sseq reference" > $output/${sample}/unique_contig_all_links_L${blength}_P${bpid}.tbl
			rm $output/${sample}/unique_contig_all_links_L${blength}_P${bpid}.tbl
			cat $output/${sample}/unique_contig_links_to_*.tbl >> $output/${sample}/unique_contig_all_links_L${blength}_P${bpid}.tbl
			rm -f $output/${sample}/unique_contig_links_to_*.tbl
			rm -f $output/${sample}/unique_contig_links_to_*.names
			cat $output/${sample}/unique_contig_all_links_L${blength}_P${bpid}.tbl | cut -f1 > $output/${sample}/${xeno_filename}.txt
			seqkit grep -f $output/${sample}/${xeno_filename}.txt $output/${sample}/unique_contigs.fasta -o $output/${sample}/${xeno_filename}.fasta 2> $output/logs/xenotypic.log
		fi
fi


############
###### Tracing across samples ######
############ 

if [ $trace == "true" ] ; then
		
	# TRACING XENOTYPIC CONTIGS
	if [[ -s $output/${sample}/${xeno_filename}.fasta ]] ; then
		echo -e "\n[xenoseq_trace    $(date +%d-%m_%H:%M:%S)] Tracing xenotypic contigs from ${sample} across all samples." 
		bwa_index $output/${sample}/${xeno_filename}.fasta
		for (( j=0; j<${#query_samples[@]}; j++ )); do
			index=$output/${sample}/${xeno_filename}.fasta
			reads="$output/${query_samples[$j]}/reads/prepped_reads.fastq"
			out="$output/${query_samples[$j]}/read_mapping/${query_samples[$j]}_to_${xeno_filename}_from_${sample}"
			bwa_map $index $reads $out
			if [ ! -f ${out}_coverage.txt ]; then
				samtools_coverage $out
			fi
			awk -v sample=${query_samples[$j]} '{print $0,sample}' ${out}_coverage.txt > ${out}_coverage.tmp
			tail -n+2 ${out}_coverage.tmp >> $output/${sample}/${xeno_filename}_coverage.tmp
		done

		for (( j=0; j<${#ureference_samples[@]}; j++ )); do
			if [[ ${ureference_samples[$j]} == "empty" ]]; then continue; fi;
			index=$output/${sample}/${xeno_filename}.fasta			
			reads="$output/${ureference_samples[$j]}/reads/prepped_reads.fastq"
			out="$output/${ureference_samples[$j]}/read_mapping/${ureference_samples[$j]}_to_${xeno_filename}_from_${sample}"
			bwa_map $index $reads $out
			if [ ! -f ${out}_coverage.txt ]; then
				samtools_coverage $out
			fi
			awk -v sample=${ureference_samples[$j]} '{print $0,sample}' ${out}_coverage.txt > ${out}_coverage.tmp
			tail -n+2 ${out}_coverage.tmp >> $output/${sample}/${xeno_filename}_coverage.tmp
		done
		rm -rf $output/${sample}/${xeno_filename}.fasta.*
		echo -e "contig\tstartpos\tendpos\tnumreads\tcovbases\tcoverage\tmeandepth\tmeanbaseq\tmeanmapq\tsample" > $output/${sample}/${xeno_filename}_coverage.txt
		cat $output/${sample}/${xeno_filename}_coverage.tmp >> $output/${sample}/${xeno_filename}_coverage.txt
		rm -rf mv $output/${sample}/${xeno_filename}_coverage.tmp 
	fi 	
	
	#if [[ -s $output/${sample}/unique_contigs.fasta ]] ; then
	#	echo -e "\n[xenoseq_trace    $(date +%d-%m_%H:%M:%S)] Tracing unique contigs from ${sample} across all samples." 
	#	bwa_index $output/${sample}/unique_contigs.fasta
	#	for (( j=0; j<${#query_samples[@]}; j++ )); do
	#		index=$output/${sample}/unique_contigs.fasta
	#		reads="$output/${query_samples[$j]}/reads/prepped_reads.fastq"
	#		out="$output/${query_samples[$j]}/read_mapping/${query_samples[$j]}_to_unique_from_${sample}"
	#		bwa_map $index $reads $out
	#		if [ ! -f ${out}_coverage.txt ]; then
	#			samtools_coverage $out
	#		fi
	#		awk -v sample=${query_samples[$j]} '{print $0,sample}' ${out}_coverage.txt > ${out}_coverage.tmp
	#		tail -n+2 ${out}_coverage.tmp >> $output/${sample}/unique_contigs_coverage.tmp
	#	done
	#	ureference_samples=($(echo "${reference_samples[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' '))
	#	for (( j=0; j<${#ureference_samples[@]}; j++ )); do
	#		index=$output/${sample}/unique_contigs.fasta			
	#		reads="$output/${ureference_samples[$j]}/reads/prepped_reads.fastq"
	#		out="$output/${ureference_samples[$j]}/read_mapping/${ureference_samples[$j]}_to_unique_from_${sample}"
	#		bwa_map $index $reads $out
	#		if [ ! -f ${out}_coverage.txt ]; then
	#			samtools_coverage $out
	#		fi
	#		awk -v sample=${ureference_samples[$j]} '{print $0,sample}' ${out}_coverage.txt > ${out}_coverage.tmp
	#		tail -n+2 ${out}_coverage.tmp >> $output/${sample}/unique_contigs_coverage.tmp
	#	done
	#
	#	rm -rf $output/${sample}/unique_contigs.fasta.*
	#	echo -e "contig\tstartpos\tendpos\tnumreads\tcovbases\tcoverage\tmeandepth\tmeanbaseq\tmeanmapq\tsample" > $output/${sample}/unique_contigs_coverage.txt
	#	cat $output/${sample}/unique_contigs_coverage.tmp >> $output/${sample}/unique_contigs_coverage.txt
	#	rm -rf $output/${sample}/unique_contigs_coverage.tmp
	#fi 
fi

