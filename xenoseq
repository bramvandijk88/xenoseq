#!/bin/bash
#
#
########

SCRIPT_PATH=`dirname "$0"`; SCRIPT_PATH=`eval "cd \"$SCRIPT_PATH\" && pwd"`
source $SCRIPT_PATH/bin/xenoseq_functions;

ORANGE='\033[0;33m' 	# WARNINGS
RED='\033[0;31m'	# ERRORS
GREEN='\033[0;32m'	# COMPLETION
BLUE='\033[0;36m'	# FILES
PRP='\033[0;35m'	# COSMETIC
GREY='\033[0;90m'	# CMD message
NC='\033[0m' # No Color

version="1.2.2"         # 1.2 = Major overhaul to suppor parallel processing
			# 1.2.2 = Skipping samples option

echo -e "\n${ORANGE} __    __                                                             ";
echo "/  |  /  |                                                            ";
echo "AT |  GC |  ______   _______    ______    _______   ______    ______  ";
echo "GG  \/AG/  /      \ /       \  /      \  /       | /      \  /      \ ";
echo " TA  TT<  /GATACT  |TAAATGG  |/CCGTAA  |/AATAAAS/ /ATTTCT  |/ATGTTA  |";
echo "  TGAC  \ AA    GA |TG |  GG |AG |  AG |TT      \ TT    CG |GA |  AT |";
echo " AA /AT  |GATCCCGT/ TA |  AA |CG \__AG | GGAACT  |TACGGGTA/ GT \__AT |";
echo "AA |  GC |CC       |GA |  GT |GC    GT/ /     GG/ TA       |AG    AT |";
echo "GG/   TG/  GTAGGCC/ CA/   TT/  TAAATG/  ATGCGCG/   ATGCAAT/  AGGGTTT |";
echo "                                                                  AA |";
echo "                                                                  AA |";
echo -e "                                                                  AA/ ${NC}\n";
echo -e "----------------------------------------------------------------------"
echo -e "                          (XENOSEQ v${version})                            "
echo -e "----------------------------------------------------------------------\n"


print_usage() {
	echo -e "xenoseq v${version}\n"
	echo -e "contact: bramvandijk88@gmail.com\n"
	echo -e "Usage:\n\t xenoseq -m <meta_data_tsv> -o <output_dir> -c <num_cores> -t"
	echo -e "Mandatory:
	-m/--metadata\t\tFile containing the metadata (tsv file with query-reference sets)
Optional options:
	-p/--path_to_reads <STRING> \tPath to reads for samples in metadata (default = $path_to_reads)
	-r/--read_suffix <STRING> \tRead suffix corresponding to metadata n ames (e.g. when read filenames are Sample1_R1.fq and Sample1_R2.fq, use _R*.fq) (default = ${read_suffix})
	-l/--link\t\t\tAfter detecting unique contigs, attempt to link them to other reference samples.
	-t/--trace\t\t\tAfter detecting xenotypic contigs, trace them across all samples.
	-c/--cores <INT>\t\tNumber of CPUs to use for smaller tasks (passed on to bwa, samtools, etc.) (default = ${cores})
	-C/--assembly_cores <INT>\t\tNumber of CPUs to use for assembly (megahit) (default = ${cores})
	-j/--jobs  <INT>\t\tMaximum number of parallel jobs (default = ${jobs})
	-J/--max_assembly_jobs  <INT>\tMaximum number of parallel jobs for assembly (default = $max_assembly_jobs)
	-o/--output <STRING>\t\tOutput directory to put all the data
	-L/--alignment_length\t\tMinimal alignment length to link unique sequences to other reference samples.
	-S/--single_end <STRING> \tAssume single-end reads (e.g. use only Sample1_R1.fq and skip read merging) 
	-P/--alignment_pid\t\tMinimal percent identity to link unique sequences to other reference samples.
	-f/--force_relink\t\tLink unique sequences to reference samples, even when this step is already performed.\n"
}

#OPTS
output="Xenoseq_default"
path_to_reads="samples/reads"
read_suffix="_R*.fq"
trace=false
link=false
single=false
force_relink=false
metadata=""
jobs=4
cores=4
blength=300
verbal=true
bpid=99
xeno_filename="xenotypic_contigs"

command=""
cmd_args=("$@")

while [ $# -gt 0 ]; do
	if [[ $1 =~ ^(-h|-help|--h|--help)$ ]] || [ -z "$1" ]; then
		print_usage;
		exit 1;
	elif [[ $1 =~ ^(-m|--metadata)$ ]]; then
		metadata=("$2")
	elif [[ $1 =~ ^(-v|--verbal)$ ]]; then
		verbal=true
	elif [[ $1 =~ ^(-o|--output)$ ]]; then
		output=("$2")
	elif [[ $1 =~ ^(-t|--trace)$ ]]; then
		trace=true
	elif [[ $1 =~ ^(-S|--single_end)$ ]]; then
		single=true
	elif [[ $1 =~ ^(-l|--link)$ ]]; then
		link=true
	elif [[ $1 =~ ^(-c|--cores)$ ]]; then
		cores=("$2")
	elif [[ $1 =~ ^(-C|--assembly_cores)$ ]]; then
		assembly_cores=("$2")
	elif [[ $1 =~ ^(-J|--max_assembly_jobs)$ ]]; then
		max_assembly_jobs=("$2")
	elif [[ $1 =~ ^(-f|--force_relink)$ ]]; then
		force_relink=true
	elif [[ $1 =~ ^(-p|--path_to_reads)$ ]]; then
		path_to_reads=("$2")
	elif [[ $1 =~ ^(-r|--read_suffix)$ ]]; then
		read_suffix=("$2")
	elif [[ $1 =~ ^(-j|--jobs)$ ]]; then
		jobs=("$2")
	elif [[ $1 =~ ^(-L|--alignment_length)$ ]]; then
		blength=("$2")
	elif [[ $1 =~ ^(-P|--alignment_pid)$ ]]; then
		bpid=("$2")
	elif [[ $1 == *"-"* ]]; then
		v="${1/-/}"
		declare $v="$2"
	fi
	shift
done

############
###### Parsing meta data ######
############
echo -e "[xenoseq_main     $(date +%d-%m_%H:%M:%S)] ${BLUE}STEP 1) PARSING METADATA${NC}"

if [[ $metadata == "" ]]; then
	print_usage
	exit 1
elif [[ ! -f $metadata ]]; then
	echo -en "\n[ERROR] Metadata file (${metadata}) does not exist.\n\n"
	exit 1
fi
parse_metadata $metadata

ureference_samples=($(echo "${reference_samples[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' '))
if [[ "$single" == true ]]; then echo -en "[xenoseq_main     $(date +%d-%m_%H:%M:%S)] ${ORANGE}Note: option -S was set. Assuming single-end reads${NC}\n"; fi
echo -en "[xenoseq_main     $(date +%d-%m_%H:%M:%S)] Checking if query-reads exist with suffix ${BLUE}\"${read_suffix}\"${NC} in path ${BLUE}\"${path_to_reads}\"${NC}"
for (( i=0; i<${#query_samples[@]}; i++ )); do
	#echo ${path_to_reads}/${query_samples[$i]}${read_suffix}
	for file in ${path_to_reads}/${query_samples[$i]}${read_suffix}; do
		if [ ! -f $file ]; then
			echo -en "\t[ERROR]\n\nReads for \"${query_samples[$i]}\" not found at ${BLUE}${path_to_reads}${NC}/${query_samples[$i]}${BLUE}${read_suffix}${NC}. Try setting the correct path (-p) and suffix (-r) to locate your reads \n\n"
			exit 1
		fi
	done
done
echo -e "\t${GREEN}[OK]${NC}"
echo -en "[xenoseq_main     $(date +%d-%m_%H:%M:%S)] Checking if subject-reads exist with suffix ${BLUE}\"$read_suffix\"${NC} in path ${BLUE}\"${path_to_reads}\"${NC}"
for (( i=0; i<${#reference_samples[@]}; i++ )); do
	#echo ${path_to_reads}/${reference_samples[$i]}${read_suffix}
	for file in ${path_to_reads}/${reference_samples[$i]}${read_suffix}; do
		if [ ! -f $file ]; then
			echo -en "\t[ERROR]\n\nReads for \"${reference_samples[$i]}\" not found at ${BLUE}${path_to_reads}${NC}/${reference_samples[$i]}${BLUE}${read_suffix}${NC}. Try setting the correct path (-p) and suffix (-r) to locate your reads \n\n"
			exit 1
		fi
	done
done
echo -e "\t${GREEN}[OK]${NC}"

# Make the global output directory
mkdir -p ${output}/
mkdir -p ${output}/logs

echo -e "[xenoseq_main     $(date +%d-%m_%H:%M:%S)] ${BLUE}STEP 2) PREPARING ALL SAMPLES${NC}"

############
###### Prepare reference samples ######
############

prep_jobs=()
for (( i=0; i<${#reference_samples[@]}; i++ )); do
	echo -e "[xenoseq_prep     $(date +%d-%m_%H:%M:%S)] Generating xenoseq_prep jobs for reference ${reference_samples[$i]}" 

	r1=$(ls ${path_to_reads}/${reference_samples[$i]}${read_suffix} | head -n 1)
	r2=""
	if [ "$single" = false ]; then 
		r2="-r2 "
		r2+="$(ls ${path_to_reads}/${reference_samples[$i]}${read_suffix} | tail -n 1)" 
	fi
	mkdir -p $output/${reference_samples[$i]}/reads
	mkdir -p $output/${reference_samples[$i]}/read_mapping
	mkdir -p $output/${reference_samples[$i]}/logs

	prep_jobs+="bash ${SCRIPT_PATH}/bin/xenoseq_prep -r1 $r1 $r2 -c $cores -o $output/${reference_samples[$i]} \n"	
done

for (( i=0; i<${#query_samples[@]}; i++ )); do
	echo -e "[xenoseq_prep     $(date +%d-%m_%H:%M:%S)] Generating xenoseq_prep jobs for query ${query_samples[$i]}" 

	r1=$(ls ${path_to_reads}/${query_samples[$i]}${read_suffix} | head -n 1)
	r2=""
	if [ "$single" = false ]; then 
		r2="-r2 "
		r2+="$(ls ${path_to_reads}/${query_samples[$i]}${read_suffix} | tail -n 1)" 
	fi
	mkdir -p $output/${query_samples[$i]}/reads
	mkdir -p $output/${query_samples[$i]}/read_mapping
	mkdir -p $output/${query_samples[$i]}/logs

	prep_jobs+="bash ${SCRIPT_PATH}/bin/xenoseq_prep -r1 $r1 $r2 -c $cores -o $output/${query_samples[$i]} \n"
done

echo -e "[xenoseq_prep     $(date +%d-%m_%H:%M:%S)] Running all preparation jobs in parallel ($jobs jobs at a time)" 
echo -en $prep_jobs | sort | uniq | parallel -j $jobs --will-cite


############
###### FIND unique reads and assemble into contigs, then link / trace them across samples
############

echo -e "[xenoseq_main     $(date +%d-%m_%H:%M:%S)] ${BLUE}STEP 3) MAIN PIPELINE (FIND & TRACE)${NC}" 

main_jobs=()

for (( i=0; i<${#query_samples[@]}; i++ )); do
	echo -e "[xenoseq_find     $(date +%d-%m_%H:%M:%S)] Generating xenoseq jobs for ${query_samples[$i]}"
	if [[ "${query_samples[$i]}" == "${reference_samples[$i]}" ]]; then
		echo "Skipping xenoseq for ${query_samples[$i]} as no reference was indicated."
		continue
	fi
	reads=$output/${query_samples[$i]}/reads/prepped_reads.fasta
	out="$output/${query_samples[$i]}/read_mapping/${query_samples[$i]}_to_${reference_samples[$i]}"
	main_jobs+="bash ${SCRIPT_PATH}/bin/xenoseq_main -s $i ${cmd_args[@]} \n "	
done
echo $main_jobs

echo -e "[xenoseq_find     $(date +%d-%m_%H:%M:%S)] Running all xenoseq jobs (find, link, trace) in parallel ($jobs jobs at a time)" 
echo -en $main_jobs | sort | uniq | parallel -j $jobs --will-cite

echo -e "\n[xenoseq_find     $(date +%d-%m_%H:%M:%S)] ${GREEN}Xenoseq completed for all samples ${NC}" 

if [[ $force_relink = "true" ]]; then 
	xeno_filename="xenotypic_contigs_L${blength}_P${bpid}"
fi


for (( i=0; i<${#query_samples[@]}; i++ )); do
	sample=${query_samples[$i]}
	num_uniq=0
	if [ -f $output/${sample}/unique_contigs.fasta ]; then num_uniq=$(grep -c '>' $output/${sample}/unique_contigs.fasta); fi
	num_xenos=0
	if [ -f $output/${sample}/${xeno_filename}.fasta ]; then num_xenos=$(grep -c '>' $output/${sample}/${xeno_filename}.fasta); fi
	if [ $link == "true" ]; then 
		echo -e "[xenoseq_link     $(date +%d-%m_%H:%M:%S)]${PRP} Found $num_uniq unique contigs in ${sample}. $num_xenos of these are xenotypic. ${NC}"
	else 
		echo -e "[xenoseq_find     $(date +%d-%m_%H:%M:%S)]${PRP} Found $num_uniq unique contigs in ${sample}. Skipping xenoseq_link (-l not set) ${NC}"
	fi
done



echo -e "[xenoseq          $(date +%d-%m_%H:%M:%S)] ${GREEN}Xenoseq finished! :)${NC}"

