#!/bin/bash
#
#
########
cores=4

SCRIPT_PATH=`dirname "$0"`; SCRIPT_PATH=`eval "cd \"$SCRIPT_PATH\" && pwd"`
source $SCRIPT_PATH/xenoseq_bin/functions.sh;

ORANGE='\033[0;33m' 	# WARNINGS
RED='\033[0;31m'	# ERRORS
GREEN='\033[0;32m'	# COMPLETION
BLUE='\033[0;36m'	# FILES
PRP='\033[0;35m'	# COSMETIC
GREY='\033[0;90m'	# CMD message
NC='\033[0m' # No Color

version="1.0.0"         # Stable release of previous changes.

echo -e "\n${ORANGE} __    __                                                             ";
echo "/  |  /  |                                                            ";
echo "AT |  GC |  ______   _______    ______    _______   ______    ______  ";
echo "GG  \/AG/  /      \ /       \  /      \  /       | /      \  /      \ ";
echo " TA  TT<  /GATACT  |TAAATGG  |/CCGTAA  |/AATAAAS/ /ATTTCT  |/ATGTTA  |";
echo "  TGAC  \ AA    GA |TG |  GG |AG |  AG |TT      \ TT    CG |GA |  AT |";
echo " AA /AT  |GATCCCGT/ TA |  AA |CG \__AG | GGAACT  |TACGGGTA/ GT \__AT |";
echo "AA |  GC |CC       |GA |  GT |GC    GT/ /     GG/ TA       |AG    AT |";
echo "GG/   TG/  GTAGGCC/ CA/   TT/  TAAATG/  ATGCGCG/   ATGCAAT/  AGGGTTT |";
echo "                                                                  AA |";
echo "                                                                  AA |";
echo -e "                                                                  AA/ ${NC}\n";
echo -e "----------------------------------------------------------------------"
echo -e "                          (XENOSEQ v${version})                            "
echo -e "----------------------------------------------------------------------\n"

print_usage() {
	echo -e "xenoseq v${version}\n"
	echo -e "contact: bramvandijk88@gmail.com\n"
	echo -e "Usage:\n\t xenoseq -m <meta_data_tsv> -o <output_dir> -c <num_cores> -t"
	echo -e "Mandatory:
	-m/--metadata\t\tFile containing the metadata (tsv file with query-reference sets)
Optional options:
	-p/--path_to_reads <STRING> \tPath to reads for samples in metadata
	-r/--read_suffix <STRING> \tRead suffix for paired files in metadata (e.g. _R*.fq for using _R1.fq and _R2.fq)
	-l/--link\t\t\tAfter detecting unique contigs, attempt to link them to other reference samples.
	-t/--trace\t\t\tAfter detecting xenotypic contigs, trace them across all samples.
	-c/--cores <INT>\t\tNumber of threads to use in parallisable parts of the pipeline
	-o/--output <STRING>\t\tOutput directory to put all the data
	-L/--alignment_length\t\tMinimal alignment length to link unique sequences to other reference samples.
	-P/--alignment_pid\t\tMinimal percent identity to link unique sequences to other reference samples."
}

#OPTS
output="Xenoseq_default"
path_to_reads="samples/reads"
read_suffix="_R*.fq"
trace=false
link=false
metadata=""
blength=300
bpid=99

while [ $# -gt 0 ]; do
	if [[ $1 =~ ^(-h|-help|--h|--help)$ ]] || [ -z "$1" ]; then
		print_usage;
		exit 1;
	elif [[ $1 =~ ^(-m|--metadata)$ ]]; then
		metadata=("$2")
	elif [[ $1 =~ ^(-o|--output)$ ]]; then
		output=("$2")
	elif [[ $1 =~ ^(-t|--trace)$ ]]; then
		trace=true
	elif [[ $1 =~ ^(-l|--link)$ ]]; then
		link=true
	elif [[ $1 =~ ^(-p|--path_to_reads)$ ]]; then
		path_to_reads=("$2")
	elif [[ $1 =~ ^(-r|--read_suffix)$ ]]; then
		read_suffix=("$2")
	elif [[ $1 =~ ^(-c|--cores)$ ]]; then
		cores=("$2")
	elif [[ $1 =~ ^(-L|--alignment_length)$ ]]; then
		blength=("$2")
	elif [[ $1 =~ ^(-P|--alignment_pid)$ ]]; then
		bpid=("$2")
	elif [[ $1 == *"-"* ]]; then
		v="${1/-/}"
		declare $v="$2"
	fi
	shift
done


############
###### Parsing meta data ######
############
echo -e "[xenoseq_main     $(date +%d-%m_%H:%M:%S)] ${BLUE}STEP 1) PARSING METADATA${NC}"

if [[ $metadata == "" ]]; then
	print_usage
	exit 1
elif [[ ! -f $metadata ]]; then
	echo -en "\n[ERROR] Metadata file (${metadata}) does not exist.\n\n"
	exit 1
fi
parse_metadata $metadata

echo -en "[xenoseq_main     $(date +%d-%m_%H:%M:%S)] Checking if query-reads exist with suffix ${BLUE}\"${read_suffix}\"${NC} in path ${BLUE}\"${path_to_reads}\"${NC}"
for (( i=0; i<${#query_samples[@]}; i++ )); do
	for file in ${path_to_reads}/${query_samples[$i]}${read_suffix}; do
		if [ ! -f $file ]; then
			echo -en "\t[ERROR]\n\nReads for \"${query_samples[$i]}\" not found at ${BLUE}${path_to_reads}${NC}/${query_samples[$i]}${BLUE}${read_suffix}${NC}. Try setting the correct path (-p) and suffix (-r) to locate your reads \n\n"
			exit 1
		fi
	done
done
echo -e "\t${GREEN}[OK]${NC}"
echo -en "[xenoseq_main     $(date +%d-%m_%H:%M:%S)] Checking if subject-reads exist with suffix ${BLUE}\"$read_suffix\"${NC} in path ${BLUE}\"${path_to_reads}\"${NC}"
for (( i=0; i<${#reference_samples[@]}; i++ )); do
	for file in ${path_to_reads}/${reference_samples[$i]}${read_suffix}; do
		if [ ! -f $file ]; then
			echo -en "\t[ERROR]\n\nReads for \"${reference_samples[$i]}\" not found at ${BLUE}${path_to_reads}${NC}/${reference_samples[$i]}${BLUE}${read_suffix}${NC}. Try setting the correct path (-p) and suffix (-r) to locate your reads \n\n"
			exit 1
		fi
	done
done
echo -e "\t${GREEN}[OK]${NC}"

# Make the global output directory
mkdir -p ${output}/
mkdir -p ${output}/logs

echo -e "[xenoseq_main     $(date +%d-%m_%H:%M:%S)] ${BLUE}STEP 2) PREPARING REFERENCES${NC}"

############
###### Prepare reference samples ######
############

for (( i=0; i<${#reference_samples[@]}; i++ )); do
	echo -e "\n[xenoseq_prep     $(date +%d-%m_%H:%M:%S)] Preparing reference ${reference_samples[$i]}" # Note to user, to just run this part instead of the whole pipeline, use 'xenoseq_find'

	r1=$(ls ${path_to_reads}/${reference_samples[$i]}${read_suffix} | head -n 1)
	r2=$(ls ${path_to_reads}/${reference_samples[$i]}${read_suffix} | tail -n 1)
	mkdir -p $output/${reference_samples[$i]}/reads
	mkdir -p $output/${reference_samples[$i]}/logs

	trim $r1 $r2 $output/${reference_samples[$i]}/reads/merged_reads.fasta
	assemble_mh $output/${reference_samples[$i]}/reads/merged_reads.fasta 100 $output/${reference_samples[$i]}/assembly
	bwa_index $output/${reference_samples[$i]}/assembly/final.contigs.fa
	blastdb $output/${reference_samples[$i]}/assembly/final.contigs.fa 
done

echo -e "[xenoseq_main     $(date +%d-%m_%H:%M:%S)] ${BLUE}STEP 3) MAPPING TO REFERENCE${NC}" # Note to user, to just run this part instead of the whole pipeline, use 'xenoseq_find'

############
###### Mapping to queries and assembling unique reads into contigs (unique_contigs.fasta) ######
############

for (( i=0; i<${#query_samples[@]}; i++ )); do
	echo -e "\n[xenoseq_find     $(date +%d-%m_%H:%M:%S)] Looking for unique/xenotypic contigs in ${query_samples[$i]}" # Note to user, to just run this part instead of the whole pipeline, use 'xenoseq_find'

	r1=$(ls ${path_to_reads}/${query_samples[$i]}${read_suffix} | head -n 1)
	r2=$(ls ${path_to_reads}/${query_samples[$i]}${read_suffix} | tail -n 1)
	reads=$output/${query_samples[$i]}/reads/merged_reads.fasta
	trim $r1 $r2 $reads
	index=$output/${reference_samples[$i]}/assembly/final.contigs.fa
	mkdir -p $output/${query_samples[$i]}/read_mapping
	out="$output/${query_samples[$i]}/read_mapping/${query_samples[$i]}_to_${reference_samples[$i]}"
	bwa_map $index $reads $out
	unmapped_to_fasta $out.sorted.bam ${reference_samples[$i]}
	assemble_mh $output/${query_samples[$i]}/reads/unique_reads.fasta 300 $output/${query_samples[$i]}/unique_assembly
	seqkit sort -l -r $output/${query_samples[$i]}/unique_assembly/final.contigs.fa > $output/${query_samples[$i]}/unique_contigs.fasta 2> $output/logs/seqkit.log
	
	if [ $link == "true" ]; then
		unique_refs=($(echo "${reference_samples[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' '))
		for (( j=0; j<${#unique_refs[@]}; j++ )); do
			if [ ! $j -eq $i ]; then
				if [ -s $output/${query_samples[$i]}/unique_contigs.fasta ]; then
					index=$output/${reference_samples[$j]}/assembly/final.contigs.fa
					out="$output/${query_samples[$i]}/read_mapping/${query_samples[$i]}_to_${reference_samples[$j]}"
					bwa_map $index $reads $out
					samtools_coverage $out
					ref="${reference_samples[$j]}";
					link_contig $output/${query_samples[$i]}/unique_contigs.fasta $index $output/${query_samples[$i]}/unique_contig_links_to_${reference_samples[$j]}.tbl
				fi
			fi
		done
		if ls $output/${query_samples[$i]}/unique_contig_links_to_*.tbl 1> /dev/null 2>&1; then
			cat $output/${query_samples[$i]}/unique_contig_links_to_*.tbl > $output/${query_samples[$i]}/unique_contig_all_links.tbl
			rm -f $output/${query_samples[$i]}/unique_contig_links_to_*.tbl
			cat $output/${query_samples[$i]}/unique_contig_all_links.tbl | cut -f1 > $output/${query_samples[$i]}/xenotypic_contigs.txt
			seqkit grep -f $output/${query_samples[$i]}/xenotypic_contigs.txt $output/${query_samples[$i]}/unique_contigs.fasta -o $output/${query_samples[$i]}/xenotypic_contigs.fasta 2> $output/logs/xenotypic.log
		fi
	fi
	num_uniq=0
	if [ -f $output/${query_samples[$i]}/unique_contigs.fasta ]; then num_uniq=$(grep -c '>' $output/${query_samples[$i]}/unique_contigs.fasta); fi
	num_xenos=0
	if [ -f $output/${query_samples[$i]}/xenotypic_contigs.fasta ]; then num_xenos=$(grep -c '>' $output/${query_samples[$i]}/xenotypic_contigs.fasta); fi
	if [ $link == "true" ]; then 
		echo -e "[xenoseq_link     $(date +%d-%m_%H:%M:%S)]${PRP} Found $num_uniq unique contigs in ${query_samples[$i]}. $num_xenos of these are xenotypic. ${NC}"
	else 
		echo -e "[xenoseq_find     $(date +%d-%m_%H:%M:%S)]${PRP} Found $num_uniq unique contigs in ${query_samples[$i]}. Skipping xenoseq_link (-l not set) ${NC}"
	fi

done

############
###### Tracing across samples ######
############ 

if [ $trace == "true" ] ; then
	echo -e "[xenoseq_main     $(date +%d-%m_%H:%M:%S)] ${BLUE}STEP 4) TRACING UNIQUE/XENOTYPIC SEQUENCES${NC}"

	for (( i=0; i<${#query_samples[@]}; i++ )); do

		if [ -s $output/${query_samples[$i]}/unique_contigs.fasta ]; then
			echo -e "\n[xenoseq_trace    $(date +%d-%m_%H:%M:%S)] Tracing unique contigs from ${query_samples[$i]} across all samples." 
			bwa_index $output/${query_samples[$i]}/unique_contigs.fasta
			for (( j=0; j<${#query_samples[@]}; j++ )); do
				index=$output/${query_samples[$i]}/unique_contigs.fasta
				reads="$output/${query_samples[$j]}/reads/merged_reads.fasta"
				out="$output/${query_samples[$j]}/read_mapping/${query_samples[$j]}_to_unique_from_${query_samples[$i]}"
				bwa_map $index $reads $out
				if [ ! -f ${out}_coverage.txt ]; then
					samtools_coverage $out
					sed -i "s/$/\t${query_samples[$j]}/" ${out}_coverage.txt
					tail -n+2 ${out}_coverage.txt >> $output/${query_samples[$i]}/unique_coverage.txt
				fi
			done
			for (( j=0; j<${#reference_samples[@]}; j++ )); do
				index=$output/${query_samples[$i]}/unique_contigs.fasta
				mkdir -p $output/${reference_samples[$j]}/read_mapping
				if [ -s $output/${query_samples[$i]}/unique_contigs.fasta ]; then
					reads="$output/${reference_samples[$j]}/reads/merged_reads.fasta"
					out="$output/${reference_samples[$j]}/read_mapping/${reference_samples[$j]}_to_unique_from_${query_samples[$i]}"
					bwa_map $index $reads $out
					if [ ! -f ${out}_coverage.txt ]; then
						samtools_coverage $out
						sed -i "s/$/\t${reference_samples[$j]}/" ${out}_coverage.txt
						tail -n+2 ${out}_coverage.txt >> $output/${query_samples[$i]}/unique_coverage.txt
					fi
				fi
			done
		rm -rf $output/${query_samples[$i]}/unique_contigs.fasta.*
		sed -i "1i\contig\tstartpos\tendpos\tnumreads\tcovbases\tcoverage\tmeandepth\tmeanbaseq\tmeanmapq\tsample" $output/${query_samples[$i]}/unique_coverage.txt
		fi 

		if [ -s $output/${query_samples[$i]}/xenotypic_contigs.fasta ]; then
			echo -e "\n[xenoseq_trace    $(date +%d-%m_%H:%M:%S)] Tracing xenotypic contigs from ${query_samples[$i]} across all samples." 
			bwa_index $output/${query_samples[$i]}/xenotypic_contigs.fasta
			for (( j=0; j<${#query_samples[@]}; j++ )); do
				index=$output/${query_samples[$i]}/xenotypic_contigs.fasta
				reads="$output/${query_samples[$j]}/reads/merged_reads.fasta"
				out="$output/${query_samples[$j]}/read_mapping/${query_samples[$j]}_to_xenotypic_from_${query_samples[$i]}"
				bwa_map $index $reads $out
				if [ ! -f ${out}_coverage.txt ]; then
					samtools_coverage $out
					sed -i "s/$/\t${query_samples[$j]}/" ${out}_coverage.txt
					tail -n+2 ${out}_coverage.txt >> $output/${query_samples[$i]}/xenotypic_coverage.txt
				fi
			done
			for (( j=0; j<${#reference_samples[@]}; j++ )); do
				index=$output/${query_samples[$i]}/xenotypic_contigs.fasta
				mkdir -p $output/${reference_samples[$j]}/read_mapping
				if [ -s $output/${query_samples[$i]}/xenotypic_contigs.fasta ]; then
					reads="$output/${reference_samples[$j]}/reads/merged_reads.fasta"
					out="$output/${reference_samples[$j]}/read_mapping/${reference_samples[$j]}_to_xenotypic_from_${query_samples[$i]}"
					bwa_map $index $reads $out
					if [ ! -f ${out}_coverage.txt ]; then
						samtools_coverage $out
						sed -i "s/$/\t${reference_samples[$j]}/" ${out}_coverage.txt
						tail -n+2 ${out}_coverage.txt >> $output/${query_samples[$i]}/xenotypic_coverage.txt
					fi
				fi
			done
		rm -rf $output/${query_samples[$i]}/xenotypic_contigs.fasta.*
		sed -i "1i\contig\tstartpos\tendpos\tnumreads\tcovbases\tcoverage\tmeandepth\tmeanbaseq\tmeanmapq\tsample" $output/${query_samples[$i]}/xenotypic_coverage.txt
		fi 
	done
fi

echo -e "[xenoseq_main     $(date +%d-%m_%H:%M:%S)] ${GREEN}Xenoseq finished.${NC}"
