#!/bin/bash

cores=4

SCRIPT_PATH=`dirname "$0"`; SCRIPT_PATH=`eval "cd \"$SCRIPT_PATH\" && pwd"`
source $SCRIPT_PATH/functions.sh; 		# Simple custom-made functions to manipulate fasta files

ORANGE='\033[0;33m'     # WARNINGS
RED='\033[0;31m'        # ERRORS
GREEN='\033[0;32m'      # COMPLETION
BLUE='\033[0;36m'       # FILES
GREY='\033[0;90m'       # CMD message
PRP='\033[0;35m'        # COSMETIC
NC='\033[0m' # No Color


print_usage() {
	  printf "Usage: ./xenoseq_prep -r1 forward_reads.fq -r2 reverse_reads.fq -o <output_filename> (-c NUM_CORES)\n"
  }


if [ "$#" -lt 2 ]; then
    print_usage;
	exit 1;
fi

while [ $# -gt 0 ]; do
	if [[ $1 =~ ^(-h|-help|--h|--help)$ ]] || [ -z "$1" ]; then
		print_usage;
	elif [[ $1 =~ ^(-r1|--r1|-forward|--forward)$ ]]; then
		r1=("$2")
	elif [[ $1 =~ ^(-r2|--r2|-reverse|--reverse)$ ]]; then
		r2=("$2")
	elif [[ $1 =~ ^(-o|--o|-output|--output)$ ]]; then
		output=("$2")
	elif [[ $1 =~ ^(-c|--cores)$ ]]; then
		cores=("$2")
	elif [[ $1 == *"-"* ]]; then	 # Capture any other flag in variable just in case
		v="${1/-/}"
		declare $v="$2"
	fi
	shift
done

dir=$(dirname $output)
mkdir -p $dir/reads
mkdir -p $dir/read_mapping
mkdir -p ${dir}/reads/QCreports
filename=$(basename -- "$output")
filename="${filename%.*}"

if [ -f $output/reads/merged_reads.fasta ]; then
	echo -e "[xenoseq_prep     $(date +%d-%m_%H:%M:%S)] ${ORANGE}NOTE: using pre-existing $output/reads/merged_reads.fasta ${NC}"
else
	echo -e "[xenoseq_prep     $(date +%d-%m_%H:%M:%S)] Using fastp to prepare reads (trim, dedup, and merge)"
	fastp -x -l 75 --cut_front 25 --cut_tail 25 -D --adapter_fasta $SCRIPT_PATH/adapter_sequences.fa -i $r1 -I $r2 -m --merged_out $output/reads/merged_reads.fasta --include_unmerged -h ${dir}/reads/QCreports/${filename}.html -j ${dir}/reads/QCreports/${filename}.json &> /dev/null
	echo -e "[xenoseq_prep     $(date +%d-%m_%H:%M:%S)] Fastp completed; $BLUE$(basename $r1)$NC + $BLUE$(basename $r2)$NC --> ${BLUE}$(dirname $output)/${filename}.fasta${NC}"
fi

if [ -f $output/assembly/final.contigs.fa ]; then
	echo -e "[xenoseq_prep     $(date +%d-%m_%H:%M:%S)] ${ORANGE}NOTE: using pre-existing $output/assembly/final.contigs.fa ${NC}"
else
	echo -e "[xenoseq_prep     $(date +%d-%m_%H:%M:%S)] Using megahit to assemble reads"
	megahit -r $output/reads/merged_reads.fasta -t $cores --min-contig-len 300 --preset meta-large -o $output/assembly &> /dev/null
	echo -e "[xenoseq_prep     $(date +%d-%m_%H:%M:%S)] Assembly completed; ${BLUE} $output/assembly/final.contigs.fa ${NC}"
fi



if [ -f $output/assembly/final.contigs.fa.ndb ]; then
	echo -e "[xenoseq_prep     $(date +%d-%m_%H:%M:%S)] ${ORANGE}NOTE: using pre-existing $output/assembly/final.contigs.fa.ndb ${NC}"
else
	echo -e "[xenoseq_prep     $(date +%d-%m_%H:%M:%S)] Setting up blast database"
	makeblastdb -in $output/assembly/final.contigs.fa -dbtype nucl &> /dev/null
	echo -e "[xenoseq_prep     $(date +%d-%m_%H:%M:%S)] DB completed; ${BLUE} $output/assembly/final.contigs.fa.ndb ${NC}"
fi


if [ -f $output/assembly/final.contigs.fa.bwt ]; then
	echo -e "[xenoseq_prep     $(date +%d-%m_%H:%M:%S)] ${ORANGE}NOTE: using pre-existing $output/assembly/final.contigs.fa.bwt ${NC}"
else
	echo -e "[xenoseq_prep     $(date +%d-%m_%H:%M:%S)] Setting up BWA database"
	bwa index $output/assembly/final.contigs.fa &> /dev/null
	echo -e "[xenoseq_prep     $(date +%d-%m_%H:%M:%S)] DB completed; ${BLUE} $output/assembly/final.contigs.fa.bwt ${NC}"
fi
	
echo -e "[xenoseq_prep     $(date +%d-%m_%H:%M:%S)] ${GREEN}Xenoseq_prep completed succesfully${NC}" 
