#!/bin/bash

cores=4

ORANGE='\033[0;33m' 	# WARNINGS
RED='\033[0;31m'	# ERRORS
GREEN='\033[0;32m'	# COMPLETION
BLUE='\033[0;36m'	# FILES
PRP='\033[0;35m'	# COSMETIC
NC='\033[0m' # No Color
mkdir -p logs

echo -e "\n${ORANGE} __    __                                                             ";
echo "/  |  /  |                                                            ";
echo "SS |  SS |  ______   _______    ______    _______   ______    ______  ";
echo "SS  \/SS/  /      \ /       \  /      \  /       | /      \  /      \ ";
echo " SS  SS<  /SSSSSS  |SSSSSSS  |/SSSSSS  |/SSSSSSS/ /SSSSSS  |/SSSSSS  |";
echo "  SSSS  \ SS    SS |SS |  SS |SS |  SS |SS      \ SS    SS |SS |  SS |";
echo " SS /SS  |SSSSSSSS/ SS |  SS |SS \__SS | SSSSSS  |SSSSSSSS/ SS \__SS |";
echo "SS |  SS |SS       |SS |  SS |SS    SS/ /     SS/ SS       |SS    SS |";
echo "SS/   SS/  SSSSSSS/ SS/   SS/  SSSSSS/  SSSSSSS/   SSSSSSS/  SSSSSSS |";
echo "                                                                  SS |";
echo "                                                                  SS |";
echo -e "                                                                  SS/ ${NC}\n";

# 1) The first for loop preps all the read in the example directory (samples/reads)
# so that we have merged and quality checked reads in FASTA format:

echo -e "\n-= Preprocessing =- (${cores} threads)"
for file in Horizontal Ancestral Vertical; do
    command="./xenoseq_prep -f1 samples/reads/${file}_reads1.fq -f2 samples/reads/${file}_reads2.fq -c $cores -o ${file}"
    echo -e "[xenoseq_cmd  $(date +%d-%m_%H:%M:%S)] ${ORANGE}$command${NC}"
    eval $command
done;
echo -e "[xenoseq_prep $(date +%d-%m_%H:%M:%S)] ${GREEN}Preprocessing finished succesfully.${NC}"

# 2) The second part is the core xenoseq pipeline, which does the following:
    # 2.1) Concatenate all SUBJECT reads (here the "Ancetral" and "Vertical" reads) into one large sequence
    # 2.2) Make an index library of SUBJECT-sequence (this and the previous step is done for computational efficiency)
    # 2.3) Read map QUERY (Horizontal reads) to the SUBJECT library using burrows wheeler aligner*
        # * alternatively, one can use the option -blastn to do the comparison with blastn. It takes 20-1000 times as long though, depending on your libary size.
    # 2.4) Extract all sequences with no hits into a fasta file using SAMTOOLS
    # 2.5) Assemble reads into contigs using spades (or megahit if you're in a hurry)

echo -e "\n-= Main xenoseq pipeline =- (${cores} threads)"
command="./xenoseq_main -s reads_prepped/Ancestral_prepped.fasta -s reads_prepped/Vertical_prepped.fasta -q reads_prepped/Horizontal_prepped.fasta -c $cores -o xenoseq_contigs.fasta"
echo -e "[xenoseq_cmd  $(date +%d-%m_%H:%M:%S)] ${ORANGE}$command${NC}"
eval $command

# 3) Post-analysis stuff
    # 3.1) xenoseq_compare  compares the contigs fished out with the actually known sequences, to see how well the pipeline performs
    # 3.2) xenoseq_stats    calculates the read depth and contigs lengths

echo -e "\n-= Post analysis stuff (WIP) =- (${cores} threads)"
command="./xenoseq_compare xenoseq_contigs.fasta samples/known_unique_sequences.fasta > summary_statistics.txt"
echo -e "[xenoseq_cmd  $(date +%d-%m_%H:%M:%S)] ${ORANGE}$command${NC}"
eval $command
echo -e "[xenoseq_comp $(date +%d-%m_%H:%M:%S)] ${GREEN}Completed comparison of contigs with known unique sequences, see xenoseq_benchmark/summary_statistics.txt${NC}"

echo -e "[xenoseq_exam$(date +%d-%m_%H:%M:%S)] ${GREEN}Completed example script. Everything seems to be working.${NC}"

